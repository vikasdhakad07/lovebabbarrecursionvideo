Method:Subset Sums


class Solution{
    private void fun(int ind,int sum,ArrayList<Integer> arr,int N,ArrayList<Integer> li){
        if(ind==N){
            li.add(sum);
            return;
        }
    
        fun(ind+1,sum+arr.get(ind),arr,N,li);
        fun(ind+1,sum,arr,N,li);
    }
    ArrayList<Integer> subsetSums(ArrayList<Integer> arr, int N){
        // code here
        ArrayList<Integer> li=new ArrayList<Integer>();
        fun(0,0,arr,N,li);
        Collections.sort(li);
        return li;
    }
}


Method:2Subset Sums-2


class Solution {
    private void fun(int ind,int arr[],List<List<Integer>> li,List<Integer> res){
        if(ind>=arr.length){
            li.add(new ArrayList<>(res));
            return;
        }
        res.add(arr[ind]);
        fun(ind+1,arr,li,res);
        res.remove(res.size()-1);
        while(ind<arr.length-1&&arr[ind]==arr[ind+1]) ind++;
        fun(ind+1,arr,li,res);
    }
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> li=new ArrayList<>();
        List<Integer> res=new ArrayList<>();
        int ind=0;
        Arrays.sort(nums);
        fun(0,nums,li,res);
        return li;
    }
}
