Method:Subset Sums


class Solution{
    private void fun(int ind,int sum,ArrayList<Integer> arr,int N,ArrayList<Integer> li){
        if(ind==N){
            li.add(sum);
            return;
        }
    
        fun(ind+1,sum+arr.get(ind),arr,N,li);
        fun(ind+1,sum,arr,N,li);
    }
    ArrayList<Integer> subsetSums(ArrayList<Integer> arr, int N){
        // code here
        ArrayList<Integer> li=new ArrayList<Integer>();
        fun(0,0,arr,N,li);
        Collections.sort(li);
        return li;
    }
}


Method: RECURSION (SUBSET SUM)


class Solution{
    static Boolean fun(int i, int N, int arr[],int sum){
        if(i>=N){
            return false;
        }
        
        if(sum==0){
            return true;
        }
      
      
    boolean l=fun(i+1,N,arr,sum-arr[i]);
    boolean r=fun(i+1,N,arr,sum);
    //   if(sum==suml){
    //   return true;
    //   }
       return l|r;
    }

    static Boolean isSubsetSum(int N, int arr[], int sum){
        // code here
        Arrays.sort(arr);
        return fun(0,N, arr, sum);
    }
}


Method: 2 Subset Sum (RECURSION + MEMOISATION)

class Solution{
    static int fun(int i, int N, int arr[],int sum, int dp[][]){
        
        if(sum==0){
            return dp[i][sum]=1;
        }
        
        if(i==N){
            return dp[i][sum]=0;
        }
      
      if(dp[i][sum]!=-1){
          return dp[i][sum];
      }
      
      if(arr[i]>sum){
          return dp[i][sum]=fun(i+1,N,arr,sum,dp);
      }
      else{
    int op1=fun(i+1,N,arr,sum, dp);
    int op2=fun(i+1,N,arr,sum-arr[i], dp);
    
  if(op1==1||op2==1){
      return dp[i][sum]=1;
  }
  else{
      return dp[i][sum]=0;
  }
    }
    }

    static Boolean isSubsetSum(int N, int arr[], int sum){
        // code here

        int dp[][]=new int[N+1][sum+1];
        for(int i=0;i<=N;i++){
            for(int j=0;j<=sum;j++){
                dp[i][j]=-1;
            }
        }
        return fun(0,N, arr, sum, dp)==1;

    }
}

Method:2Subset Sums-2


class Solution {
    private void fun(int ind,int arr[],List<List<Integer>> li,List<Integer> res){
        if(ind>=arr.length){
            li.add(new ArrayList<>(res));
            return;
        }
        res.add(arr[ind]);
        fun(ind+1,arr,li,res);
        res.remove(res.size()-1);
        while(ind<arr.length-1&&arr[ind]==arr[ind+1]) ind++;
        fun(ind+1,arr,li,res);
    }
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        List<List<Integer>> li=new ArrayList<>();
        List<Integer> res=new ArrayList<>();
        int ind=0;
        Arrays.sort(nums);
        fun(0,nums,li,res);
        return li;
    }
}
